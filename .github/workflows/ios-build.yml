name: iOS Build Expo Managed Workflow - Staging & Production

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  archive:
    name: Archive iOS (Staging & Production)
    runs-on: macos-14
    strategy:
      matrix:
        buildType: [staging, production]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Select Xcode 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-${{ hashFiles('package-lock.json') }}
          restore-keys: node-

      - name: Install dependencies
        run: npm install

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: pods-

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          cd ios && pod install

      # Use separate DerivedData per build type
      - name: Cache DerivedData (Xcode)
        uses: irgaly/xcode-cache@v1
        with:
          key: xcode-cache-deriveddata-${{ github.workflow }}-${{ matrix.buildType }}-${{ github.ref_name }}
          restore-keys: |
            xcode-cache-deriveddata-${{ github.workflow }}-${{ matrix.buildType }}-
          restore-mtime-targets: |
            DemoApp/**/*

      # Archive iOS App
      - name: Archive iOS App
        run: |
          cd ios
          mkdir -p build
          DERIVED_DATA_PATH=$(pwd)/build/DerivedData-${{ matrix.buildType }}
          if [ "${{ matrix.buildType }}" = "staging" ]; then
            xcodebuild \
              -workspace DemoApp.xcworkspace \
              -scheme DemoApp \
              -configuration Release \
              -derivedDataPath "$DERIVED_DATA_PATH" \
              CODE_SIGNING_ALLOWED=NO \
              -archivePath build/DemoApp-Staging.xcarchive \
              archive
          else
            xcodebuild \
              -workspace DemoApp.xcworkspace \
              -scheme DemoApp \
              -configuration Release \
              -derivedDataPath "$DERIVED_DATA_PATH" \
              CODE_SIGNING_ALLOWED=NO \
              -archivePath build/DemoApp-Production.xcarchive \
              archive
            # Run iXGuard obfuscation on production archive
            # Replace with your actual iXGuard command
            # ixguard-cli build build/DemoApp-Production.xcarchive
          fi